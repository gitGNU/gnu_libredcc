% LibreDCC 
% Andre Gruening 

# Copyright

Copyright 2014 André Grüning <libredcc@email.de>

This file is part of LibreDCC

LibreDCC is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LibreDCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LibreDCC.  If not, see <http://www.gnu.org/licenses/>.


# Introduction



LibreDCC is a project to create open source software for
microcontroller and PC based encoders and decoders of communication
protocols used in model railway electronics. 

# Documentation

Check in the subprojects folders for README files with information on
compilation and installation.


# Projects

Currently LibreDCC consists of the subprojects below. 

libraries:
  ~ libraries in folders `lib` and their headers in `include`that are (potentially) used across several projects. For
    most project below, you will need to compile the libraries first.
	[TODO: automate this process]

LibreS88:
  ~ LibreS88 in folder `s88` is a protocol to speak to feedback sensors. We implement
    here a S88 decoder that listens to sensors on an S88 bus, see
    [http://www.s88-n.eu/index-en.html] for a specification. The
	decoder is implemented on an Arduino board and connects to a
	software command station (such as rocrail, see
	[http://wiki.rocrail.net/doku.php]) on a PC via USB using the HSI-88
	protocol, see
    [http://ldt-infocenter.com/dokuwiki/doku.php?id=en:dl_hsi_88].
  
  
# Philosophy

We aim to implement decoders and encoders on open software and on open
hardware as far as possible to drive down the costs of model railway electronics for the
enthusiast. 

We aim to separate hardware details (eg for different
microcontrollers) from protocol details so that encoder/decoder
software can easily be ported from one microcontroller board to
another or even to a PC or Raspberry PI board.

Initially microcontroller-based projects will be stand-alone (except
for glibc etc) and will be based on the Arduino platforms. 

# Typesetting

This document is typeset using markdown / pandoc
[http://johnmacfarlane.net/pandoc/], an unobtrusive markup (or rather
markdown) language that also document source files to be
human-reading, while allowing easy transformation into other formats, such as HTML or LaTeX. 

Run `pandoc README -o README.pdf` to create a pdf version of this document.
